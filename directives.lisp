(in-package #:cl-strftime)

(deftype flag ()
  '(and character (member #\- #\_ #\0 #\# #\^)))

(deftype directive-action ()
  '(or character string symbol))

(def time-directives
  (alist-hash-table
   '((#\% #\%)
     (#\A weekday-name)
     (#\a short-weekday-name)
     (#\B month-name)
     (#\b short-month-name)
     (#\C century-of-year)
     (#\d timestamp-day 2 #\0)
     (#\D "%m/%d/%y")
     (#\e timestamp-day 2 #\_)
     (#\F "%Y-%m-%d")
     (#\G iso-8601-year)
     (#\g iso-8601-year-of-century 2 #\0)
     (#\h short-month-name)
     (#\H timestamp-hour 2 #\0)
     (#\I o-clock 2 #\0)
     (#\j timestamp-day-of-year 3 #\0)
     (#\k timestamp-hour 2 #\_)
     (#\l o-clock 2 #\_)
     (#\m timestamp-month 2 #\0)
     (#\M timestamp-minute 2 #\0)
     (#\n #\Newline)
     (#\p am/pm)
     ;; Not the same as %#p, because of padding.
     (#\P am/pm-lowercase)
     (#\r "%I:%M:%S %p")
     (#\R "%H:%M")
     (#\s timestamp-to-unix)
     (#\S timestamp-second 2 #\0)
     (#\t #\Tab)
     (#\T "%H:%M:%S")
     (#\u iso-day-of-week)
     (#\U sunday-week-number 2 #\0)
     (#\v "%e-%b-%Y")
     (#\V iso-8601-week-number 2 #\0)
     (#\w timestamp-day-of-week)
     (#\W monday-week-number 2 #\0)
     (#\y year-of-century 2 #\0)
     (#\Y timestamp-year)
     (#\z time-zone-offset)
     (#\Z time-zone-name))))

(defun find-directive (char &key noerror)
  (if-let (directive (gethash char time-directives))
    (values-list directive)
    (if noerror
        nil
        (error 'unknown-directive :char char))))
